options{
  STATIC = false;
}

PARSER_BEGIN(AnalizadorSintacticoDesc)
package tiny1.analizadorsintactico.desc;

import tiny1.asint.TinyASint;
import tiny1.asint.TinyASint.*;

public class AnalizadorSintacticoDesc{
	private TinyASint asint = new TinyASint();
}

PARSER_END(AnalizadorSintacticoDesc)


Prog Init()  : {Prog prog;} 
				{prog=Prog() <EOF> {return prog;}
				}
Prog Prog()   : {Decs decs; Insts insts;} 
				{decs=Decs() insts=Insts(){return asint.prog(decs, insts);} 
				 }
Decs Decs()   : {Decs decs;} 
				{decs=LDec() "&&" {return asint.auxDecs(decs);} |
				{return asint.noDecs;}
				}
Decs LDec()   : {Dec dec; Decs decs;} 
				{dec=Dec() decs=RLDec(asint.decSimp(dec)){return decs;}
				}
Decs RLDec(Decs decsh)  : {Dec dec; Decs decs;} 
				{";" dec=Dec() decs=RLDec(asint.decComp(decsh, dec)) {return decs;} |
				 {return decsh;}
				 }
Dec Dec()    : {Dec dec;} { dec=DVar() {return dec;} | 
				dec=DTipo() {return dec;} | 
				dec=DProc() {return dec;}
				}

Dec DVar()   : {Tipo tipo; Token id;}  
				{"var" tipo=Tipo() id=<IDEN> {return asint.dVar(tipo, asint.str(id.image,id.beginLine,id.beginColumn));}
				}
Dec DTipo()  : {Tipo tipo; Token id;} 
				{ "type" tipo=Tipo() id=<IDEN> {return asint.dTipo(tipo, asint.str(id.image,id.beginLine,id.beginColumn));}
				}
Dec DProc()  : {Token id; Pars pars; Inst bloque;} 
				{ "proc" id=<IDEN> "(" pars=Pars() ")" bloque=Bloque() {return asint.dProc(asint.str(id.image,id.beginLine,id.beginColumn), pars, bloque);}
				}
Pars Pars()	  : {Par par; Pars pars;} 
				{par=Par() pars=RPar(asint.parsSimp(par)) {return pars;} |
				{return asint.noPars;}
				}
Pars RPar(Pars parsh): {Par par; Pars pars;} 
				{ "," par=Par() pars=RPar(asint.parsComp(parsh, par)) {return pars;} | 
				{return parsh;}
				}
Par Par() 	  : {Tipo tipo; Par par;} 
				{tipo=Tipo() par=FPar(tipo) {return par;}
				}
Par FPar(Tipo tipoh): {Token id;}
				{"&" id=<IDEN> {return asint.parRef(tipoh, asint.str(id.image,id.beginLine,id.beginColumn));} |
				id=<IDEN> {return asint.parSinRef(tipoh, asint.str(id.image,id.beginLine,id.beginColumn));}
				}
Tipo Tipo()   : {Token id; Tipo tipo;} 
				{id=<INT> {return asint.TypeInt;} |
				 id=<REAL>  {return asint.TypeReal;} | 
				 id=<BOOL> {return asint.TypeBool;} |
				 id=<STRING> {return asint.TypeString;} |
				 id=<IDEN> {return asint.idenTipo(asint.str(id.image,id.beginLine,id.beginColumn));} |
				 tipo=Array() {return tipo;} |
				 tipo=Registro() {return tipo;} |
				 tipo=Pointer() {return tipo;}
				 }

Tipo Array()    : {Token ent; Tipo tipo;} 
				  { "array" "[" ent=<ENT> "]" "of" tipo=Tipo() {return asint.array(asint.str(ent.image,ent.beginLine,ent.beginColumn), tipo);}
				  }
Tipo Registro() : {Campos campos;} 
				{ "record" "{" campos=Campos() "}" {return asint.registro(campos);}}
Campos Campos()   : {Campos campos; Campo campo;} 
				{ campo=Campo() campos=RCampo(asint.camposSimp(campo)) {return campos;}}
Campos RCampo(Campos camposh): {Campos campos; Campo campo;} 
				{ ";" campo=Campo() campos=RCampo(asint.camposComp(camposh, campo)) {return campos;} |
				{return camposh;}
				}
Campo Campo()    : {Tipo tipo; Token id;} 
				{ tipo=Tipo() id=<IDEN> {return asint.campo(tipo, asint.str(id.image,id.beginLine,id.beginColumn));}
				}
Tipo Pointer()  : {Tipo tipo;} 
				{ "pointer" tipo=Tipo() {return asint.pointer(tipo);}
				}			 
Insts Insts() : {Inst i; Insts is;} 
				{ i=Inst() is=RInsts(asint.instsSimp(i)) {return is;} |
				{return asint.noInsts;}
				}
Insts RInsts(Insts ih) : {Inst i; Insts is;} 
				{ ";" i=Inst() is=RInsts(asint.instsComp(ih, i)) {return is;} |
				{return ih;}
				}
Inst Inst()  : {Inst i;} 
				{ i=IAsig() {return i;} |
				 i=IIfThen() {return i;} | 
				 i=IWhile() {return i;} |
				 i=IRead() {return i;} |
				 i=IWrite() {return i;} |
				 i=INl() {return i;} | 
				 i=INew() {return i;} | 
				 i=IDelete() {return i;} | 
				 i=ICall() {return i;} | 
				 i=Bloque() {return i;}
				 }
			
Inst IIfThen(): {Exp e; Inst i; Insts iss;}
				{"if" e=E0() "then" iss=Insts() i=FIIfThen(e, iss) {return i;}
				}
Inst FIIfThen(Exp eh, Insts issh): {Insts iss;}
				{"else" iss=Insts() "endif" {return asint.iIfThenElse(eh,issh,iss);} |
				"endif" {return asint.iIfThen(eh, issh);} 
				}				
Inst INl() : {} { "nl" {return asint.iNl();}}

Inst IAsig() : 	{Exp e, ee;} 
				{ e=E0() "=" ee=E0() {return asint.iAsig(e,ee);}}
Inst IWhile():	 {Exp e; Insts iss;} 
				{"while" e=E0() "do" iss=Insts() "endwhile" {return asint.iWhile(e,iss);}
				}
Inst IRead() :	 {Exp e;} 
				{ "read" e=E0() {return asint.iRead(e);}}
Inst IWrite() :	 {Exp e;} 
				{ "write" e=E0() {return asint.iWrite(e);}}
Inst INew() : 	 {Exp e;} 
				{ "new" e=E0() {return asint.iNew(e);}}
Inst IDelete() : {Exp e;} 
				{ "delete" e=E0() {return asint.iDelete(e);}}
Inst ICall() : {Token id; Exps e;} 
				{ "call" id=<IDEN> "(" e=EXPs() ")" {return asint.iCall(asint.str(id.image,id.beginLine,id.beginColumn), e);}
				}
Inst Bloque() 	: {Prog prog;} 
				{ "{" prog=Prog() "}" {return asint.bloque(prog);}
				}	
Exps EXPs(): {Exps es; Exp e;} 
				{ e=E0() es=REXPs(asint.exps0(e)) {return es;} |
				{return asint.noExps;}
				}
Exps REXPs(Exps esh): {Exps es; Exp e;} 
				{"," e=E0() es=REXPs(asint.exps1(esh, e)) {return es;}| 
				{return esh;}
				}

String CMP(): {} { "<" {return "<";} |
				 ">" {return ">";} | 
				 ">=" {return ">=";} | 
				 "<=" {return "<=";} | 
				 "==" {return "==";} | 
				 "!=" {return "!=";} }
String Op3NA(): {} { "*" {return "*";} |
				 "/" {return "/";} |
				 "%" {return "%";} }

Exp E0():  {Exp e, ee;} 
				{ e=E1() ee=FE0(e) {return ee;} 
				}
Exp FE0(Exp eh): {Exp e;} 
				{ "+" e=E0() {return asint.suma(eh, e);} |
				 "-" e=E1() {return asint.resta(eh,e);} |
				 {return eh;}
				}
				
Exp E1():   {Exp e, ee;} 
				{ e=E2() ee=RE1(e) {return ee;}
				}
Exp RE1(Exp eh): {Exp e, ee;} 
				{ "and" e=E2() ee=RE1(asint.and(eh, e)) {return ee;} | 
				"or" e=E2() ee=RE1(asint.or(eh,e)) {return ee;} |
				{return eh;}
				}
Exp E2(): {Exp e, ee;}  
				{ e=E3() ee=RE2(e) {return ee;}
				}
Exp RE2(Exp eh): {String cmp; Exp e, ee;} 
				{ cmp=CMP() e=E3() ee=RE2(asint.cmp(cmp, eh, e)) {return ee;} |
				{ return eh;}}

Exp E3(): {Exp e, ee;} 
				{ e=E4() ee=FE3(e) {return ee;}
				}
Exp FE3(Exp eh): {String op; Exp e;} 
				{ op=Op3NA() e=E4() {return asint.op3na(op,eh,e);} | 
				{return eh;}
				}
Exp E4(): {Exp e;} 
				{ "not" e=E4() {return asint.not(e);} |
				"-" e=E5()  {return asint.neg(e);} | 
				e=E5() {return e;}
				}
Exp E5(): {Exp e, ee;} 
				{ e=E6() ee=FE5(e) {return ee;}
				}
Exp FE5(Exp eh): {Exp e, ee; Token id;} 
				{ "[" e=E0() "]" ee=FE5(asint.index(eh, e)) {return ee;} |
				"." id=<IDEN> ee=FE5(asint.atr(eh, asint.str(id.image,id.beginLine,id.beginColumn))) {return ee;} |
				"->" id=<IDEN> ee=FE5(asint.ptr(eh, asint.str(id.image,id.beginLine,id.beginColumn))) {return ee;} |
				{return eh;}
				}
Exp E6(): {Exp e;} 
				{ "*" e=E6() {return asint.indir(e);}|
				 e=E7() {return e;}
				 }

Exp E7(): {Exp e; Token id;} 
				{ "(" e=E0() ")" {return asint.parentesis(e);} |
				 id=<ENT> {return asint.ent(asint.str(id.image,id.beginLine,id.beginColumn));} |
				 id=<LREAL> {return asint.lreal(asint.str(id.image,id.beginLine,id.beginColumn));} |
				 id=<TRUE> {return asint.ttrue(asint.str(id.image,id.beginLine,id.beginColumn));} |
				 id=<FALSE> {return asint.ffalse(asint.str(id.image,id.beginLine,id.beginColumn));} |
				 id=<CADENA> {return asint.cadena(asint.str(id.image,id.beginLine,id.beginColumn));} |
				 id=<IDEN> {return asint.idenExp(asint.str(id.image,id.beginLine,id.beginColumn));} |
				 id=<NULL> {return asint.nnull(asint.str(id.image,id.beginLine,id.beginColumn));}
				 }
SKIP :
{
<["\t"," ","\r","\b","\n"]> |
<"#"(~["\n"])*>
}
TOKEN:{
  
	< #LETRA 	: ["a"-"z","A"-"Z"] > |
	< #DIGP  	: ["1"-"9"] > |
	< #DIG   	: ["0"-"9"] > |
	< #PARTEENT : (< DIGP >) (< DIG >)* > |
	< #PARTEDEC : (< DIG >)* (< DIGP >) > |

	< ENT : ("+"|"-")? (< PARTEENT >|"0") > |
	< LREAL :  ("+"|"-")? (< PARTEENT >|"0") (("." (< PARTEDEC > | "0")) | (("e"|"E") < INT >) | ("." (< PARTEDEC > | "0")) (("e"|"E") < INT >)) > |
	< INT: "int" > |
	< STRING: "string" > |
	< BOOL: "bool" > |
	< TRUE: "true" > |
	< FALSE: "false" > |
	< REAL: "real" > |
	< NULL: "null" > |
	< IDEN : < LETRA > (< LETRA > | < DIG > | "_" )*> |
	< CADENA : "\"" (~["\""])* "\"" > 
}

