/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoDesc.java */
package tiny1.analizadorsintactico.desc;

import tiny1.asint.TinyASint;
import tiny1.asint.TinyASint.*;

public class AnalizadorSintacticoDesc implements AnalizadorSintacticoDescConstants {
        private TinyASint asint = new TinyASint();

  final public Prog Init() throws ParseException {
                Prog prog;
    prog = Prog();
    jj_consume_token(0);
                                                    {if (true) return prog;}
    throw new Error("Missing return statement in function");
  }

  final public Prog Prog() throws ParseException {
                 Decs decs; Insts insts;
    decs = Decs();
    insts = Insts();
                                                           {if (true) return asint.progConDecs(decs, insts);}
    throw new Error("Missing return statement in function");
  }

  final public Decs Decs() throws ParseException {
                 Decs decs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
    case 4:
    case 5:
      decs = LDec();
      jj_consume_token(1);
                                                   {if (true) return decs;}
      break;
    default:
      jj_la1[0] = jj_gen;
                                 {if (true) return asint.noDecs;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Decs LDec() throws ParseException {
                 Dec dec; Decs decs;
    dec = Dec();
    decs = RLDec(asint.decSimp(dec));
                                                                          {if (true) return decs;}
    throw new Error("Missing return statement in function");
  }

  final public Decs RLDec(Decs decsh) throws ParseException {
                           Dec dec; Decs decs;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      dec = Dec();
      decs = RLDec(asint.decComp(decsh, dec));
                                                                                      {if (true) return decs;}
      break;
    default:
      jj_la1[1] = jj_gen;
                                  {if (true) return decsh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Dec Dec() throws ParseException {
                Dec dec;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
      dec = DVar();
                                        {if (true) return dec;}
      break;
    case 4:
      dec = DTipo();
                                             {if (true) return dec;}
      break;
    case 5:
      dec = DProc();
                                             {if (true) return dec;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Dec DVar() throws ParseException {
                Tipo tipo; Token id;
    jj_consume_token(3);
    tipo = Tipo();
    id = jj_consume_token(IDEN);
                                                              {if (true) return asint.dVar(tipo, asint.str(id.image,id.beginLine,id.beginColumn));}
    throw new Error("Missing return statement in function");
  }

  final public Dec DTipo() throws ParseException {
                Tipo tipo; Token id;
    jj_consume_token(4);
    tipo = Tipo();
    id = jj_consume_token(IDEN);
                                                                {if (true) return asint.dTipo(tipo, asint.str(id.image,id.beginLine,id.beginColumn));}
    throw new Error("Missing return statement in function");
  }

  final public Dec DProc() throws ParseException {
                Token id; Dec dec;
    jj_consume_token(5);
    id = jj_consume_token(IDEN);
    jj_consume_token(6);
    dec = FDProc(id);
                                                                       {if (true) return dec;}
    throw new Error("Missing return statement in function");
  }

  final public Dec FDProc(Token idh) throws ParseException {
                         Pars pars; Inst bloque;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 10:
    case 14:
    case 17:
    case INT:
    case STRING:
    case BOOL:
    case REAL:
    case IDEN:
      pars = Pars();
      jj_consume_token(7);
      bloque = Bloque();
                                                                  {if (true) return asint.dProcConPars(asint.str(idh.image,idh.beginLine,idh.beginColumn), pars, bloque);}
      break;
    case 7:
      jj_consume_token(7);
      bloque = Bloque();
                                                     {if (true) return asint.dProcSinPars(asint.str(idh.image,idh.beginLine,idh.beginColumn), bloque);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Parï¿½metros para el procedimiento
  final public Pars Pars() throws ParseException {
                     Par par; Pars pars;
    par = Par();
    pars = RPar(asint.parsSimp(par));
                                                                           {if (true) return pars;}
    throw new Error("Missing return statement in function");
  }

  final public Pars RPar(Pars parsh) throws ParseException {
                        Par par; Pars pars;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
      par = Par();
      pars = RPar(asint.parsComp(parsh, par));
                                                                                       {if (true) return pars;}
      break;
    default:
      jj_la1[4] = jj_gen;
                                 {if (true) return parsh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Par Par() throws ParseException {
                     Tipo tipo; Par par;
    tipo = Tipo();
    par = FPar(tipo);
                                                             {if (true) return par;}
    throw new Error("Missing return statement in function");
  }

  final public Par FPar(Tipo tipoh) throws ParseException {
                       Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
      jj_consume_token(9);
      id = jj_consume_token(IDEN);
                                                {if (true) return asint.parRef(tipoh, asint.str(id.image,id.beginLine,id.beginColumn));}
      break;
    case IDEN:
      id = jj_consume_token(IDEN);
                                           {if (true) return asint.parSinRef(tipoh, asint.str(id.image,id.beginLine,id.beginColumn));}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Tipo Tipo() throws ParseException {
                 Token id; Tipo tipo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      id = jj_consume_token(INT);
                                           {if (true) return asint.TypeInt;}
      break;
    case REAL:
      id = jj_consume_token(REAL);
                                             {if (true) return asint.TypeReal;}
      break;
    case BOOL:
      id = jj_consume_token(BOOL);
                                            {if (true) return asint.TypeBool;}
      break;
    case STRING:
      id = jj_consume_token(STRING);
                                              {if (true) return asint.TypeString;}
      break;
    case IDEN:
      id = jj_consume_token(IDEN);
                                            {if (true) return asint.idenTipo(asint.str(id.image,id.beginLine,id.beginColumn));}
      break;
    case 10:
      tipo = Array();
                                               {if (true) return tipo;}
      break;
    case 14:
      tipo = Registro();
                                                  {if (true) return tipo;}
      break;
    case 17:
      tipo = Pointer();
                                                 {if (true) return tipo;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Tipo Array() throws ParseException {
                   Token ent; Tipo tipo;
    jj_consume_token(10);
    jj_consume_token(11);
    ent = jj_consume_token(ENT);
    jj_consume_token(12);
    jj_consume_token(13);
    tipo = Tipo();
                                                                                {if (true) return asint.array(asint.str(ent.image,ent.beginLine,ent.beginColumn), tipo);}
    throw new Error("Missing return statement in function");
  }

  final public Tipo Registro() throws ParseException {
                   Campos campos;
    jj_consume_token(14);
    jj_consume_token(15);
    campos = Campos();
    jj_consume_token(16);
                                                                    {if (true) return asint.registro(campos);}
    throw new Error("Missing return statement in function");
  }

  final public Campos Campos() throws ParseException {
                     Campos campos; Campo campo;
    campo = Campo();
    campos = RCampo(asint.camposSimp(campo));
                                                                                        {if (true) return campos;}
    throw new Error("Missing return statement in function");
  }

  final public Campos RCampo(Campos camposh) throws ParseException {
                                Campos campos; Campo campo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      campo = Campo();
      campos = RCampo(asint.camposComp(camposh, campo));
                                                                                                     {if (true) return campos;}
      break;
    default:
      jj_la1[7] = jj_gen;
                                 {if (true) return camposh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Campo Campo() throws ParseException {
                    Tipo tipo; Token id;
    tipo = Tipo();
    id = jj_consume_token(IDEN);
                                                         {if (true) return asint.campo(tipo, asint.str(id.image,id.beginLine,id.beginColumn));}
    throw new Error("Missing return statement in function");
  }

  final public Tipo Pointer() throws ParseException {
                   Tipo tipo;
    jj_consume_token(17);
    tipo = Tipo();
                                                         {if (true) return asint.pointer(tipo);}
    throw new Error("Missing return statement in function");
  }

  final public Insts Insts() throws ParseException {
                 Inst i; Insts is;
    i = Inst();
    is = RInsts(asint.instsSimp(i));
                                                                          {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

  final public Insts RInsts(Insts ih) throws ParseException {
                          Inst i; Insts is;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 2:
      jj_consume_token(2);
      i = Inst();
      is = RInsts(asint.instsComp(ih, i));
                                                                                  {if (true) return is;}
      break;
    default:
      jj_la1[8] = jj_gen;
                                 {if (true) return ih;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst Inst() throws ParseException {
                Inst i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 38:
    case 42:
    case 45:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      i = IAsig();
                                             {if (true) return i;}
      break;
    case 18:
      i = IIfThen();
                                              {if (true) return i;}
      break;
    case 24:
      i = IWhile();
                                             {if (true) return i;}
      break;
    case 27:
      i = IRead();
                                            {if (true) return i;}
      break;
    case 28:
      i = IWrite();
                                             {if (true) return i;}
      break;
    case 22:
      i = INl();
                                          {if (true) return i;}
      break;
    case 29:
      i = INew();
                                           {if (true) return i;}
      break;
    case 30:
      i = IDelete();
                                              {if (true) return i;}
      break;
    case 31:
      i = ICall();
                                            {if (true) return i;}
      break;
    case 15:
      i = Bloque();
                                             {if (true) return i;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst IIfThen() throws ParseException {
                 Exp e; Inst i;
    jj_consume_token(18);
    e = E0();
    jj_consume_token(19);
    i = FIIfThen(e);
                                                                   {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public Inst FIIfThen(Exp eh) throws ParseException {
                        Inst is; Insts iss;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 15:
    case 18:
    case 22:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 38:
    case 42:
    case 45:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      iss = Insts();
      is = F1IIfThenElse(eh, iss);
                                                                        {if (true) return is;}
      break;
    case 20:
      jj_consume_token(20);
                                         {if (true) return asint.iIfThen0(eh);}
      break;
    case 21:
      jj_consume_token(21);
      is = F3IIfThenElse(eh);
                                                             {if (true) return is;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst F1IIfThenElse(Exp eh, Insts iss) throws ParseException {
                                        Inst is;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
      is = F2IIfThenElse(eh, iss);
                                                                   {if (true) return is;}
      break;
    case 20:
      jj_consume_token(20);
                                         {if (true) return asint.iIfThen1(eh, iss);};
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst F2IIfThenElse(Exp eh, Insts ish) throws ParseException {
                                        Insts iss;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 15:
    case 18:
    case 22:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 38:
    case 42:
    case 45:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      iss = Insts();
      jj_consume_token(20);
                                                      {if (true) return asint.iIfThenElse11(eh,ish,iss);}
      break;
    case 20:
      jj_consume_token(20);
                                         {if (true) return asint.iIfThenElse10(eh,ish);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst F3IIfThenElse(Exp eh) throws ParseException {
                             Insts iss;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 15:
    case 18:
    case 22:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 38:
    case 42:
    case 45:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      iss = Insts();
      jj_consume_token(20);
                                                      {if (true) return asint.iIfThenElse01(eh,iss);}
      break;
    case 20:
      jj_consume_token(20);
                                         {if (true) return asint.iIfThenElse00(eh);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst INl() throws ParseException {
    jj_consume_token(22);
                        {if (true) return asint.iNl();}
    throw new Error("Missing return statement in function");
  }

  final public Inst IAsig() throws ParseException {
                 Exp e, ee;
    e = E0();
    jj_consume_token(23);
    ee = E0();
                                                      {if (true) return asint.iAsig(e,ee);}
    throw new Error("Missing return statement in function");
  }

  final public Inst IWhile() throws ParseException {
                  Exp e; Inst is;
    jj_consume_token(24);
    e = E0();
    jj_consume_token(25);
    is = FIWhile(e);
                                                                    {if (true) return is;}
    throw new Error("Missing return statement in function");
  }

  final public Inst FIWhile(Exp eh) throws ParseException {
                       Insts is;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 15:
    case 18:
    case 22:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 38:
    case 42:
    case 45:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      is = Insts();
      jj_consume_token(26);
                                                        {if (true) return asint.iWhile1(eh,is);}
      break;
    case 26:
      jj_consume_token(26);
                                            {if (true) return asint.iWhile0(eh);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst IRead() throws ParseException {
                  Exp e;
    jj_consume_token(27);
    e = E0();
                                                 {if (true) return asint.iRead(e);}
    throw new Error("Missing return statement in function");
  }

  final public Inst IWrite() throws ParseException {
                  Exp e;
    jj_consume_token(28);
    e = E0();
                                                  {if (true) return asint.iWrite(e);}
    throw new Error("Missing return statement in function");
  }

  final public Inst INew() throws ParseException {
                  Exp e;
    jj_consume_token(29);
    e = E0();
                                                {if (true) return asint.iNew(e);}
    throw new Error("Missing return statement in function");
  }

  final public Inst IDelete() throws ParseException {
                  Exp e;
    jj_consume_token(30);
    e = E0();
                                                   {if (true) return asint.iDelete(e);}
    throw new Error("Missing return statement in function");
  }

  final public Inst ICall() throws ParseException {
                Token id; Inst i;
    jj_consume_token(31);
    id = jj_consume_token(IDEN);
    jj_consume_token(6);
    i = FICall(id);
                                                                     {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

  final public Inst FICall(Token idh) throws ParseException {
                         Exps e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
    case 38:
    case 42:
    case 45:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      e = EXPs();
      jj_consume_token(7);
                                               {if (true) return asint.iCall1(asint.str(idh.image,idh.beginLine,idh.beginColumn), e);}
      break;
    case 7:
      jj_consume_token(7);
                                     {if (true) return asint.iCall0(asint.str(idh.image,idh.beginLine,idh.beginColumn));}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst Bloque() throws ParseException {
                   Inst inst;
    jj_consume_token(15);
    inst = FBloque();
                                                      {if (true) return inst;}
    throw new Error("Missing return statement in function");
  }

  final public Inst FBloque() throws ParseException {
                   Prog prog;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 3:
    case 4:
    case 5:
    case 6:
    case 15:
    case 18:
    case 22:
    case 24:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 38:
    case 42:
    case 45:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      prog = Prog();
      jj_consume_token(16);
                                                  {if (true) return asint.bloque1(prog);}
      break;
    case 16:
      jj_consume_token(16);
                                     {if (true) return asint.bloque0();}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exps EXPs() throws ParseException {
              Exps es; Exp e;
    e = E0();
    es = REXPs(asint.exps0(e));
                                                                   {if (true) return es;}
    throw new Error("Missing return statement in function");
  }

  final public Exps REXPs(Exps esh) throws ParseException {
                       Exps es; Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
      e = E0();
      es = REXPs(asint.exps1(esh, e));
                                                                           {if (true) return es;}
      break;
    default:
      jj_la1[17] = jj_gen;
                                 {if (true) return esh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String CMP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
                        {if (true) return "<";}
      break;
    case 33:
      jj_consume_token(33);
                                      {if (true) return ">";}
      break;
    case 34:
      jj_consume_token(34);
                                       {if (true) return ">=";}
      break;
    case 35:
      jj_consume_token(35);
                                       {if (true) return "<=";}
      break;
    case 36:
      jj_consume_token(36);
                                       {if (true) return "==";}
      break;
    case 37:
      jj_consume_token(37);
                                       {if (true) return "!=";}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Op3NA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
                          {if (true) return "*";}
      break;
    case 39:
      jj_consume_token(39);
                                      {if (true) return "/";}
      break;
    case 40:
      jj_consume_token(40);
                                      {if (true) return "%";}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E0() throws ParseException {
            Exp e, ee;
    e = E1();
    ee = FE0(e);
                                                    {if (true) return ee;}
    throw new Error("Missing return statement in function");
  }

  final public Exp FE0(Exp eh) throws ParseException {
                  Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      e = E0();
                                              {if (true) return asint.suma(eh, e);}
      break;
    case 42:
      jj_consume_token(42);
      e = E1();
                                             {if (true) return asint.resta(eh,e);}
      break;
    default:
      jj_la1[20] = jj_gen;
                                  {if (true) return eh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E1() throws ParseException {
             Exp e, ee;
    e = E2();
    ee = RE1(e);
                                                    {if (true) return ee;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RE1(Exp eh) throws ParseException {
                  Exp e, ee;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      e = E2();
      ee = RE1(asint.and(eh, e));
                                                                         {if (true) return ee;}
      break;
    case 44:
      jj_consume_token(44);
      e = E2();
      ee = RE1(asint.or(eh,e));
                                                                    {if (true) return ee;}
      break;
    default:
      jj_la1[21] = jj_gen;
                                 {if (true) return eh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E2() throws ParseException {
           Exp e, ee;
    e = E3();
    ee = RE2(e);
                                                    {if (true) return ee;}
    throw new Error("Missing return statement in function");
  }

  final public Exp RE2(Exp eh) throws ParseException {
                  String cmp; Exp e, ee;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
      cmp = CMP();
      e = E3();
      ee = RE2(asint.cmp(cmp, eh, e));
                                                                                  {if (true) return ee;}
      break;
    default:
      jj_la1[22] = jj_gen;
                                  {if (true) return eh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E3() throws ParseException {
           Exp e, ee;
    e = E4();
    ee = FE3(e);
                                                    {if (true) return ee;}
    throw new Error("Missing return statement in function");
  }

  final public Exp FE3(Exp eh) throws ParseException {
                  String op; Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
    case 39:
    case 40:
      op = Op3NA();
      e = E4();
                                                     {if (true) return asint.op3na(op,eh,e);}
      break;
    default:
      jj_la1[23] = jj_gen;
                                 {if (true) return eh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E4() throws ParseException {
           Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      e = E4();
                                                {if (true) return asint.not(e);}
      break;
    case 42:
      jj_consume_token(42);
      e = E5();
                                             {if (true) return asint.neg(e);}
      break;
    case 6:
    case 38:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      e = E5();
                                        {if (true) return e;}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E5() throws ParseException {
           Exp e, ee;
    e = E6();
    ee = FE5(e);
                                                    {if (true) return ee;}
    throw new Error("Missing return statement in function");
  }

  final public Exp FE5(Exp eh) throws ParseException {
                  Exp e, ee; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      e = E0();
      jj_consume_token(12);
      ee = FE5(asint.index(eh, e));
                                                                             {if (true) return ee;}
      break;
    case 46:
      jj_consume_token(46);
      id = jj_consume_token(IDEN);
      ee = FE5(asint.atr(eh, asint.str(id.image,id.beginLine,id.beginColumn)));
                                                                                                                      {if (true) return ee;}
      break;
    case 47:
      jj_consume_token(47);
      id = jj_consume_token(IDEN);
      ee = FE5(asint.ptr(eh, asint.str(id.image,id.beginLine,id.beginColumn)));
                                                                                                                       {if (true) return ee;}
      break;
    default:
      jj_la1[25] = jj_gen;
                                 {if (true) return eh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E6() throws ParseException {
           Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 38:
      jj_consume_token(38);
      e = E6();
                                              {if (true) return asint.indir(e);}
      break;
    case 6:
    case ENT:
    case LREAL:
    case TRUE:
    case FALSE:
    case NULL:
    case IDEN:
    case CADENA:
      e = E7();
                                         {if (true) return e;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp E7() throws ParseException {
           Exp e; Token id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      jj_consume_token(6);
      e = E0();
      jj_consume_token(7);
                                                  {if (true) return asint.parentesis(e);}
      break;
    case ENT:
      id = jj_consume_token(ENT);
                                           {if (true) return asint.ent(asint.str(id.image,id.beginLine,id.beginColumn));}
      break;
    case LREAL:
      id = jj_consume_token(LREAL);
                                             {if (true) return asint.lreal(asint.str(id.image,id.beginLine,id.beginColumn));}
      break;
    case TRUE:
      id = jj_consume_token(TRUE);
                                            {if (true) return asint.TRUE;}
      break;
    case FALSE:
      id = jj_consume_token(FALSE);
                                             {if (true) return asint.FALSE;}
      break;
    case CADENA:
      id = jj_consume_token(CADENA);
                                              {if (true) return asint.cadena(asint.str(id.image,id.beginLine,id.beginColumn));}
      break;
    case IDEN:
      id = jj_consume_token(IDEN);
                                            {if (true) return asint.idenExp(asint.str(id.image,id.beginLine,id.beginColumn));}
      break;
    case NULL:
      id = jj_consume_token(NULL);
                                            {if (true) return asint.NULL;}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public AnalizadorSintacticoDescTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x38,0x4,0x38,0x24480,0x100,0x200,0x24400,0x4,0x4,0xf9448040,0xf9748040,0x300000,0xf9548040,0xf9548040,0xfd448040,0xc0,0xf9458078,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x800,0x40,0x40,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x4e000000,0x0,0x0,0x4e000000,0x0,0x0,0xb1802440,0xb1802440,0x0,0xb1802440,0xb1802440,0xb1802440,0xb1802440,0xb1802440,0x0,0x3f,0x1c0,0x600,0x1800,0x3f,0x1c0,0xb1802440,0xc000,0xb1800040,0xb1800000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x1,0x0,0x1,0x1,0x0,0x0,0x3,0x3,0x0,0x3,0x3,0x3,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,0x3,};
   }

  public AnalizadorSintacticoDesc(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoDescTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoDesc(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoDescTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoDesc(AnalizadorSintacticoDescTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  public void ReInit(AnalizadorSintacticoDescTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[66];
    for (int i = 0; i < 66; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
