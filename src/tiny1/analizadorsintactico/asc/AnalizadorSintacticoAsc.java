
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 24 20:23:14 CEST 2021
//----------------------------------------------------

package tiny1.analizadorsintactico.asc;

import java_cup.runtime.*;
import tiny1.analizadorlexico.AnalizadorLexicoTiny;
import tiny1.analizadorlexico.UnidadLexica;
import tiny1.errors.GestionErroresTiny;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 24 20:23:14 CEST 2021
  */
public class AnalizadorSintacticoAsc extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoAsc() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAsc(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAsc(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\007\005\000\002\010\010\000\002" +
    "\010\007\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\010\000\002\015\006\000\002\016\005\000\002\016" +
    "\003\000\002\017\004\000\002\020\004\000\002\021\005" +
    "\000\002\021\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\005" +
    "\000\002\024\007\000\002\024\006\000\002\025\011\000" +
    "\002\025\010\000\002\025\010\000\002\025\007\000\002" +
    "\026\007\000\002\026\006\000\002\027\004\000\002\030" +
    "\004\000\002\031\004\000\002\032\004\000\002\033\007" +
    "\000\002\033\006\000\002\034\005\000\002\035\005\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\040\005\000\002\040\005\000\002\040\003\000" +
    "\002\041\005\000\002\041\005\000\002\041\003\000\002" +
    "\042\005\000\002\042\003\000\002\043\005\000\002\043" +
    "\003\000\002\044\004\000\002\044\004\000\002\044\003" +
    "\000\002\045\006\000\002\045\005\000\002\045\005\000" +
    "\002\045\003\000\002\046\004\000\002\046\003\000\002" +
    "\047\005\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\060\004\044\005\035\006\051\007\027\013" +
    "\025\014\054\020\014\021\032\022\052\023\023\027\046" +
    "\032\022\033\020\040\026\041\050\042\042\043\011\044" +
    "\043\045\063\046\036\050\017\063\031\064\005\001\002" +
    "\000\016\002\uffe0\025\uffe0\026\uffe0\031\uffe0\051\uffe0\056" +
    "\uffe0\001\002\000\024\004\044\005\035\006\051\007\027" +
    "\013\025\014\054\021\032\046\036\064\005\001\002\000" +
    "\016\002\uffdd\025\uffdd\026\uffdd\031\uffdd\051\uffdd\056\uffdd" +
    "\001\002\000\006\056\ufffb\075\ufffb\001\002\000\006\056" +
    "\ufffc\075\ufffc\001\002\000\030\004\044\005\035\006\051" +
    "\007\027\013\025\014\054\020\014\021\032\046\036\063" +
    "\031\064\005\001\002\000\016\002\uffdf\025\uffdf\026\uffdf" +
    "\031\uffdf\051\uffdf\056\uffdf\001\002\000\016\002\uffdc\025" +
    "\uffdc\026\uffdc\031\uffdc\051\uffdc\056\uffdc\001\002\000\024" +
    "\004\044\005\035\006\051\007\027\013\025\014\054\021" +
    "\032\046\036\064\005\001\002\000\006\056\246\075\245" +
    "\001\002\000\004\002\244\001\002\000\060\004\044\005" +
    "\035\006\051\007\027\013\025\014\054\020\014\021\032" +
    "\022\052\023\023\027\046\032\022\033\020\040\026\041" +
    "\050\042\042\043\011\044\043\045\063\046\036\050\017" +
    "\063\031\064\005\001\002\000\022\004\120\010\114\011" +
    "\123\012\116\015\125\034\122\035\113\037\124\001\002" +
    "\000\016\002\uffd8\025\uffd8\026\uffd8\031\uffd8\051\uffd8\056" +
    "\uffd8\001\002\000\004\004\230\001\002\000\030\004\044" +
    "\005\035\006\051\007\027\013\025\014\054\020\014\021" +
    "\032\046\036\063\031\064\005\001\002\000\016\002\uffe1" +
    "\025\uffe1\026\uffe1\031\uffe1\051\uffe1\056\uffe1\001\002\000" +
    "\072\002\uffa4\016\uffa4\017\uffa4\024\uffa4\025\uffa4\026\uffa4" +
    "\030\uffa4\031\uffa4\047\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\055\uffa4\056\uffa4\057\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072" +
    "\uffa4\073\uffa4\074\uffa4\001\002\000\030\004\044\005\035" +
    "\006\051\007\027\013\025\014\054\020\014\021\032\046" +
    "\036\063\031\064\005\001\002\000\072\002\uffa2\016\uffa2" +
    "\017\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffa2\031\uffa2\047" +
    "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2" +
    "\057\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2" +
    "\001\002\000\016\002\uffde\025\uffde\026\uffde\031\uffde\051" +
    "\uffde\056\uffde\001\002\000\024\004\044\005\035\006\051" +
    "\007\027\013\025\014\054\021\032\046\036\064\005\001" +
    "\002\000\072\002\uffa0\016\uffa0\017\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\030\uffa0\031\uffa0\047\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\072\uffa0\073\uffa0\074\uffa0\001\002\000\016\002\uffdb" +
    "\025\uffdb\026\uffdb\031\uffdb\051\uffdb\056\uffdb\001\002\000" +
    "\004\061\207\001\002\000\072\002\uffa6\016\uffa6\017\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\030\uffa6\031\uffa6\047\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067" +
    "\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\001\002" +
    "\000\030\004\044\005\035\006\051\007\027\013\025\014" +
    "\054\020\014\021\032\046\036\063\031\064\005\001\002" +
    "\000\052\004\044\005\035\006\051\007\027\013\025\014" +
    "\054\020\014\021\032\023\023\027\046\032\022\040\026" +
    "\041\050\042\042\043\011\044\043\046\036\050\017\063" +
    "\031\064\005\001\002\000\016\002\uffd9\025\uffd9\026\uffd9" +
    "\031\uffd9\051\uffd9\056\uffd9\001\002\000\016\002\uffd6\025" +
    "\uffd6\026\uffd6\031\uffd6\051\uffd6\056\uffd6\001\002\000\030" +
    "\004\044\005\035\006\051\007\027\013\025\014\054\020" +
    "\014\021\032\046\036\063\031\064\005\001\002\000\016" +
    "\002\uffda\025\uffda\026\uffda\031\uffda\051\uffda\056\uffda\001" +
    "\002\000\072\002\uffa1\016\uffa1\017\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\030\uffa1\031\uffa1\047\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\001\002\000\006\056\ufff9" +
    "\075\ufff9\001\002\000\030\004\044\005\035\006\051\007" +
    "\027\013\025\014\054\020\014\021\032\046\036\063\031" +
    "\064\005\001\002\000\010\002\uffff\051\uffff\056\174\001" +
    "\002\000\030\004\044\005\035\006\051\007\027\013\025" +
    "\014\054\020\014\021\032\046\036\063\031\064\005\001" +
    "\002\000\072\002\uffa5\016\uffa5\017\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\030\uffa5\031\uffa5\047\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\061\uffa5\062\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071" +
    "\uffa5\072\uffa5\073\uffa5\074\uffa5\001\002\000\004\004\155" +
    "\001\002\000\072\002\uffa8\016\uffa8\017\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\030\uffa8\031\uffa8\047\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\074\uffa8\001\002\000\072\002" +
    "\uffa3\016\uffa3\017\uffa3\024\uffa3\025\uffa3\026\uffa3\030\uffa3" +
    "\031\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\001\002\000\072\002\uffaa\016\uffaa\017\uffaa" +
    "\024\uffaa\025\uffaa\026\uffaa\030\uffaa\031\uffaa\047\uffaa\051" +
    "\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa" +
    "\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\001\002" +
    "\000\016\002\uffd7\025\uffd7\026\uffd7\031\uffd7\051\uffd7\056" +
    "\uffd7\001\002\000\072\002\uffae\016\uffae\017\uffae\024\uffae" +
    "\025\uffae\026\uffae\030\uffae\031\uffae\047\uffae\051\uffae\052" +
    "\150\053\uffae\054\uffae\055\147\056\uffae\057\146\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\001\002\000\064" +
    "\002\uffb1\016\uffb1\017\uffb1\024\uffb1\025\uffb1\026\uffb1\030" +
    "\uffb1\031\uffb1\047\uffb1\051\uffb1\053\uffb1\054\uffb1\056\uffb1" +
    "\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067" +
    "\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\001\002" +
    "\000\064\002\uffb3\016\uffb3\017\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\030\uffb3\031\uffb3\047\uffb3\051\uffb3\053\uffb3\054\uffb3" +
    "\056\uffb3\061\uffb3\062\uffb3\063\uffb3\064\106\065\105\066" +
    "\103\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074\uffb3" +
    "\001\002\000\056\002\uffb5\016\uffb5\017\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\030\uffb5\031\uffb5\047\uffb5\051\uffb5\053\uffb5" +
    "\054\uffb5\056\uffb5\061\uffb5\062\uffb5\063\uffb5\067\076\070" +
    "\100\071\074\072\077\073\073\074\101\001\002\000\022" +
    "\004\120\010\114\011\123\012\116\015\125\034\122\035" +
    "\113\037\124\001\002\000\042\002\uffb8\016\067\017\071" +
    "\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\047\uffb8\051" +
    "\uffb8\053\uffb8\054\uffb8\056\uffb8\061\uffb8\062\066\063\070" +
    "\001\002\000\006\056\ufffa\075\ufffa\001\002\000\030\004" +
    "\044\005\035\006\051\007\027\013\025\014\054\020\014" +
    "\021\032\046\036\063\031\064\005\001\002\000\030\004" +
    "\044\005\035\006\051\007\027\013\025\014\054\020\014" +
    "\021\032\046\036\063\031\064\005\001\002\000\030\004" +
    "\044\005\035\006\051\007\027\013\025\014\054\020\014" +
    "\021\032\046\036\063\031\064\005\001\002\000\030\004" +
    "\044\005\035\006\051\007\027\013\025\014\054\020\014" +
    "\021\032\046\036\063\031\064\005\001\002\000\056\002" +
    "\uffb6\016\uffb6\017\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6" +
    "\031\uffb6\047\uffb6\051\uffb6\053\uffb6\054\uffb6\056\uffb6\061" +
    "\uffb6\062\uffb6\063\uffb6\067\076\070\100\071\074\072\077" +
    "\073\073\074\101\001\002\000\030\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\013\uffbf\014\uffbf\020\uffbf\021\uffbf\046\uffbf" +
    "\063\uffbf\064\uffbf\001\002\000\030\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\013\uffc3\014\uffc3\020\uffc3\021\uffc3\046\uffc3" +
    "\063\uffc3\064\uffc3\001\002\000\030\004\044\005\035\006" +
    "\051\007\027\013\025\014\054\020\014\021\032\046\036" +
    "\063\031\064\005\001\002\000\030\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\013\uffc2\014\uffc2\020\uffc2\021\uffc2\046\uffc2" +
    "\063\uffc2\064\uffc2\001\002\000\030\004\uffc0\005\uffc0\006" +
    "\uffc0\007\uffc0\013\uffc0\014\uffc0\020\uffc0\021\uffc0\046\uffc0" +
    "\063\uffc0\064\uffc0\001\002\000\030\004\uffc1\005\uffc1\006" +
    "\uffc1\007\uffc1\013\uffc1\014\uffc1\020\uffc1\021\uffc1\046\uffc1" +
    "\063\uffc1\064\uffc1\001\002\000\030\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\013\uffbe\014\uffbe\020\uffbe\021\uffbe\046\uffbe" +
    "\063\uffbe\064\uffbe\001\002\000\064\002\uffb4\016\uffb4\017" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\047\uffb4" +
    "\051\uffb4\053\uffb4\054\uffb4\056\uffb4\061\uffb4\062\uffb4\063" +
    "\uffb4\064\106\065\105\066\103\067\uffb4\070\uffb4\071\uffb4" +
    "\072\uffb4\073\uffb4\074\uffb4\001\002\000\030\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\013\uffbb\014\uffbb\020\uffbb\021\uffbb" +
    "\046\uffbb\063\uffbb\064\uffbb\001\002\000\030\004\044\005" +
    "\035\006\051\007\027\013\025\014\054\020\014\021\032" +
    "\046\036\063\031\064\005\001\002\000\030\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\013\uffbc\014\uffbc\020\uffbc\021\uffbc" +
    "\046\uffbc\063\uffbc\064\uffbc\001\002\000\030\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\013\uffbd\014\uffbd\020\uffbd\021\uffbd" +
    "\046\uffbd\063\uffbd\064\uffbd\001\002\000\064\002\uffb2\016" +
    "\uffb2\017\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2" +
    "\047\uffb2\051\uffb2\053\uffb2\054\uffb2\056\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\001\002\000\036\002" +
    "\uffb9\016\067\017\071\024\uffb9\025\uffb9\026\uffb9\030\uffb9" +
    "\031\uffb9\047\uffb9\051\uffb9\053\uffb9\054\uffb9\056\uffb9\061" +
    "\uffb9\001\002\000\056\002\uffb7\016\uffb7\017\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\030\uffb7\031\uffb7\047\uffb7\051\uffb7\053" +
    "\uffb7\054\uffb7\056\uffb7\061\uffb7\062\uffb7\063\uffb7\067\076" +
    "\070\100\071\074\072\077\073\073\074\101\001\002\000" +
    "\032\002\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba" +
    "\047\uffba\051\uffba\053\uffba\054\uffba\056\uffba\061\uffba\001" +
    "\002\000\004\052\141\001\002\000\006\004\ufff0\060\ufff0" +
    "\001\002\000\004\004\140\001\002\000\006\004\uffee\060" +
    "\uffee\001\002\000\006\004\uffea\060\uffea\001\002\000\006" +
    "\004\uffec\060\uffec\001\002\000\006\004\uffeb\060\uffeb\001" +
    "\002\000\004\050\130\001\002\000\006\004\uffed\060\uffed" +
    "\001\002\000\022\004\120\010\114\011\123\012\116\015" +
    "\125\034\122\035\113\037\124\001\002\000\006\004\uffef" +
    "\060\uffef\001\002\000\006\004\uffe9\060\uffe9\001\002\000" +
    "\006\004\uffe3\060\uffe3\001\002\000\022\004\120\010\114" +
    "\011\123\012\116\015\125\034\122\035\113\037\124\001" +
    "\002\000\004\004\137\001\002\000\006\051\134\056\135" +
    "\001\002\000\006\051\uffe5\056\uffe5\001\002\000\006\004" +
    "\uffe7\060\uffe7\001\002\000\022\004\120\010\114\011\123" +
    "\012\116\015\125\034\122\035\113\037\124\001\002\000" +
    "\006\051\uffe6\056\uffe6\001\002\000\006\051\uffe4\056\uffe4" +
    "\001\002\000\006\056\ufff8\075\ufff8\001\002\000\004\005" +
    "\142\001\002\000\004\053\143\001\002\000\004\036\144" +
    "\001\002\000\022\004\120\010\114\011\123\012\116\015" +
    "\125\034\122\035\113\037\124\001\002\000\006\004\uffe8" +
    "\060\uffe8\001\002\000\004\004\154\001\002\000\004\004" +
    "\153\001\002\000\030\004\044\005\035\006\051\007\027" +
    "\013\025\014\054\020\014\021\032\046\036\063\031\064" +
    "\005\001\002\000\004\053\152\001\002\000\072\002\uffad" +
    "\016\uffad\017\uffad\024\uffad\025\uffad\026\uffad\030\uffad\031" +
    "\uffad\047\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad" +
    "\074\uffad\001\002\000\072\002\uffac\016\uffac\017\uffac\024" +
    "\uffac\025\uffac\026\uffac\030\uffac\031\uffac\047\uffac\051\uffac" +
    "\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\061" +
    "\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac" +
    "\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\001\002\000" +
    "\072\002\uffab\016\uffab\017\uffab\024\uffab\025\uffab\026\uffab" +
    "\030\uffab\031\uffab\047\uffab\051\uffab\052\uffab\053\uffab\054" +
    "\uffab\055\uffab\056\uffab\057\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\074\uffab\001\002\000\004\046\156\001\002" +
    "\000\024\004\120\010\114\011\123\012\116\015\125\034" +
    "\122\035\113\037\124\047\160\001\002\000\006\004\171" +
    "\060\170\001\002\000\004\050\017\001\002\000\006\047" +
    "\164\054\163\001\002\000\006\047\ufff3\054\ufff3\001\002" +
    "\000\022\004\120\010\114\011\123\012\116\015\125\034" +
    "\122\035\113\037\124\001\002\000\004\050\017\001\002" +
    "\000\006\056\ufff6\075\ufff6\001\002\000\006\047\ufff4\054" +
    "\ufff4\001\002\000\006\056\ufff5\075\ufff5\001\002\000\004" +
    "\004\172\001\002\000\006\047\ufff1\054\ufff1\001\002\000" +
    "\006\047\ufff2\054\ufff2\001\002\000\016\002\uffc9\025\uffc9" +
    "\026\uffc9\031\uffc9\051\uffc9\056\uffc9\001\002\000\052\004" +
    "\044\005\035\006\051\007\027\013\025\014\054\020\014" +
    "\021\032\023\023\027\046\032\022\040\026\041\050\042" +
    "\042\043\011\044\043\046\036\050\017\063\031\064\005" +
    "\001\002\000\016\002\uffe2\025\uffe2\026\uffe2\031\uffe2\051" +
    "\uffe2\056\uffe2\001\002\000\004\030\177\001\002\000\054" +
    "\004\044\005\035\006\051\007\027\013\025\014\054\020" +
    "\014\021\032\023\023\027\046\031\200\032\022\040\026" +
    "\041\050\042\042\043\011\044\043\046\036\050\017\063" +
    "\031\064\005\001\002\000\016\002\uffcd\025\uffcd\026\uffcd" +
    "\031\uffcd\051\uffcd\056\uffcd\001\002\000\006\031\202\056" +
    "\174\001\002\000\016\002\uffce\025\uffce\026\uffce\031\uffce" +
    "\051\uffce\056\uffce\001\002\000\016\002\uffcc\025\uffcc\026" +
    "\uffcc\031\uffcc\051\uffcc\056\uffcc\001\002\000\010\002\001" +
    "\051\001\056\174\001\002\000\004\047\206\001\002\000" +
    "\072\002\uffa7\016\uffa7\017\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\030\uffa7\031\uffa7\047\uffa7\051\uffa7\052\uffa7\053\uffa7\054" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072" +
    "\uffa7\073\uffa7\074\uffa7\001\002\000\030\004\044\005\035" +
    "\006\051\007\027\013\025\014\054\020\014\021\032\046" +
    "\036\063\031\064\005\001\002\000\016\002\uffd5\025\uffd5" +
    "\026\uffd5\031\uffd5\051\uffd5\056\uffd5\001\002\000\072\002" +
    "\uffaf\016\uffaf\017\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf" +
    "\031\uffaf\047\uffaf\051\uffaf\052\150\053\uffaf\054\uffaf\055" +
    "\147\056\uffaf\057\146\061\uffaf\062\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073" +
    "\uffaf\074\uffaf\001\002\000\016\002\uffca\025\uffca\026\uffca" +
    "\031\uffca\051\uffca\056\uffca\001\002\000\004\024\214\001" +
    "\002\000\056\004\044\005\035\006\051\007\027\013\025" +
    "\014\054\020\014\021\032\023\023\025\216\026\215\027" +
    "\046\032\022\040\026\041\050\042\042\043\011\044\043" +
    "\046\036\050\017\063\031\064\005\001\002\000\016\002" +
    "\uffd3\025\uffd3\026\uffd3\031\uffd3\051\uffd3\056\uffd3\001\002" +
    "\000\054\004\044\005\035\006\051\007\027\013\025\014" +
    "\054\020\014\021\032\023\023\026\225\027\046\032\022" +
    "\040\026\041\050\042\042\043\011\044\043\046\036\050" +
    "\017\063\031\064\005\001\002\000\010\025\220\026\221" +
    "\056\174\001\002\000\054\004\044\005\035\006\051\007" +
    "\027\013\025\014\054\020\014\021\032\023\023\026\222" +
    "\027\046\032\022\040\026\041\050\042\042\043\011\044" +
    "\043\046\036\050\017\063\031\064\005\001\002\000\016" +
    "\002\uffd4\025\uffd4\026\uffd4\031\uffd4\051\uffd4\056\uffd4\001" +
    "\002\000\016\002\uffd0\025\uffd0\026\uffd0\031\uffd0\051\uffd0" +
    "\056\uffd0\001\002\000\006\026\224\056\174\001\002\000" +
    "\016\002\uffd2\025\uffd2\026\uffd2\031\uffd2\051\uffd2\056\uffd2" +
    "\001\002\000\016\002\uffcf\025\uffcf\026\uffcf\031\uffcf\051" +
    "\uffcf\056\uffcf\001\002\000\006\026\227\056\174\001\002" +
    "\000\016\002\uffd1\025\uffd1\026\uffd1\031\uffd1\051\uffd1\056" +
    "\uffd1\001\002\000\004\046\231\001\002\000\032\004\044" +
    "\005\035\006\051\007\027\013\025\014\054\020\014\021" +
    "\032\046\036\047\233\063\031\064\005\001\002\000\006" +
    "\047\236\054\235\001\002\000\016\002\uffc7\025\uffc7\026" +
    "\uffc7\031\uffc7\051\uffc7\056\uffc7\001\002\000\006\047\uffc4" +
    "\054\uffc4\001\002\000\030\004\044\005\035\006\051\007" +
    "\027\013\025\014\054\020\014\021\032\046\036\063\031" +
    "\064\005\001\002\000\016\002\uffc8\025\uffc8\026\uffc8\031" +
    "\uffc8\051\uffc8\056\uffc8\001\002\000\006\047\uffc5\054\uffc5" +
    "\001\002\000\004\004\241\001\002\000\006\056\ufff7\075" +
    "\ufff7\001\002\000\004\051\243\001\002\000\020\002\uffc6" +
    "\025\uffc6\026\uffc6\031\uffc6\051\uffc6\056\uffc6\075\uffc6\001" +
    "\002\000\004\002\000\001\002\000\052\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\013\ufffe\014\ufffe\020\ufffe\021\ufffe\023" +
    "\ufffe\027\ufffe\032\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe" +
    "\044\ufffe\046\ufffe\050\ufffe\063\ufffe\064\ufffe\001\002\000" +
    "\010\022\052\033\020\045\063\001\002\000\006\056\ufffd" +
    "\075\ufffd\001\002\000\072\002\uffb0\016\uffb0\017\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0\047\uffb0\051\uffb0" +
    "\052\150\053\uffb0\054\uffb0\055\147\056\uffb0\057\146\061" +
    "\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\001\002\000" +
    "\016\002\uffcb\025\uffcb\026\uffcb\031\uffcb\051\uffcb\056\uffcb" +
    "\001\002\000\072\002\uffa9\016\uffa9\017\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\030\uffa9\031\uffa9\047\uffa9\051\uffa9\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\061\uffa9\062" +
    "\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\074\uffa9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\070\002\015\003\036\004\014\005\007\006" +
    "\006\007\064\010\044\021\046\022\023\023\003\024\011" +
    "\025\027\026\005\027\012\030\032\031\037\032\020\033" +
    "\055\034\040\040\033\041\063\042\061\043\060\044\057" +
    "\045\056\046\054\047\052\001\001\000\002\001\001\000" +
    "\006\046\251\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\040\250\041\063\042" +
    "\061\043\060\044\057\045\056\046\054\047\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\247\046" +
    "\054\047\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\002\241\003\036\004\014\005\007\006\006\007" +
    "\064\010\044\021\046\022\023\023\003\024\011\025\027" +
    "\026\005\027\012\030\032\031\037\032\020\033\055\034" +
    "\040\040\033\041\063\042\061\043\060\044\057\045\056" +
    "\046\054\047\052\001\001\000\012\013\237\014\120\015" +
    "\116\020\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\040\212\041\063\042\061\043\060\044\057\045" +
    "\056\046\054\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\040\211\041\063\042\061\043\060\044" +
    "\057\045\056\046\054\047\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\045\210\046\054\047\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\040\204\041\063\042\061\043" +
    "\060\044\057\045\056\046\054\047\052\001\001\000\052" +
    "\021\203\022\023\023\003\024\011\025\027\026\005\027" +
    "\012\030\032\031\037\032\020\033\055\034\040\040\033" +
    "\041\063\042\061\043\060\044\057\045\056\046\054\047" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\040\202\041\063\042\061\043\060\044\057\045\056\046" +
    "\054\047\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\040\175\041\063\042\061\043" +
    "\060\044\057\045\056\046\054\047\052\001\001\000\002" +
    "\001\001\000\022\040\172\041\063\042\061\043\060\044" +
    "\057\045\056\046\054\047\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\103\001\001\000\004\036\074\001" +
    "\001\000\012\013\114\014\120\015\116\020\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\040\111\041" +
    "\063\042\061\043\060\044\057\045\056\046\054\047\052" +
    "\001\001\000\016\042\110\043\060\044\057\045\056\046" +
    "\054\047\052\001\001\000\020\041\107\042\061\043\060" +
    "\044\057\045\056\046\054\047\052\001\001\000\016\042" +
    "\071\043\060\044\057\045\056\046\054\047\052\001\001" +
    "\000\004\036\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\043\101\044\057\045\056\046\054\047\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\103\001\001\000\002" +
    "\001\001\000\012\044\106\045\056\046\054\047\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\126\014\120\015\116\020\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\130" +
    "\014\120\015\116\016\131\017\132\020\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\013\130\014\120\015\116\017\135\020" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\144\014\120\015\116\020\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\040\150\041\063\042\061\043\060\044\057\045\056" +
    "\046\054\047\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\011\160\012\161\013\156\014\120\015\116\020" +
    "\125\001\001\000\002\001\001\000\004\034\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\165\013" +
    "\156\014\120\015\116\020\125\001\001\000\004\034\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\022\174\023\003\024\011\025" +
    "\027\026\005\027\012\030\032\031\037\032\020\033\055" +
    "\034\040\040\033\041\063\042\061\043\060\044\057\045" +
    "\056\046\054\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\021\200\022\023\023\003\024\011\025" +
    "\027\026\005\027\012\030\032\031\037\032\020\033\055" +
    "\034\040\040\033\041\063\042\061\043\060\044\057\045" +
    "\056\046\054\047\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\040\207" +
    "\041\063\042\061\043\060\044\057\045\056\046\054\047" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\021\216\022\023\023" +
    "\003\024\011\025\027\026\005\027\012\030\032\031\037" +
    "\032\020\033\055\034\040\040\033\041\063\042\061\043" +
    "\060\044\057\045\056\046\054\047\052\001\001\000\002" +
    "\001\001\000\052\021\225\022\023\023\003\024\011\025" +
    "\027\026\005\027\012\030\032\031\037\032\020\033\055" +
    "\034\040\040\033\041\063\042\061\043\060\044\057\045" +
    "\056\046\054\047\052\001\001\000\002\001\001\000\052" +
    "\021\222\022\023\023\003\024\011\025\027\026\005\027" +
    "\012\030\032\031\037\032\020\033\055\034\040\040\033" +
    "\041\063\042\061\043\060\044\057\045\056\046\054\047" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\035\231" +
    "\040\233\041\063\042\061\043\060\044\057\045\056\046" +
    "\054\047\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\040\236\041\063\042\061\043" +
    "\060\044\057\045\056\046\054\047\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\246\006\006\007\064\010" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoAsc$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoAsc$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoAsc$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	errores = new GestionErroresTiny();
	AnalizadorLexicoTiny analizadorLexico = (AnalizadorLexicoTiny) getScanner();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }



	private GestionErroresTiny errores;
	public void syntax_error(Symbol unidadLexica){
		errores.errorSintactico((UnidadLexica) unidadLexica);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoAsc$actions {
  private final AnalizadorSintacticoAsc parser;

  /** Constructor */
  CUP$AnalizadorSintacticoAsc$actions(AnalizadorSintacticoAsc parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsc$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoAsc$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAsc$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAsc$stack,
    int                        CUP$AnalizadorSintacticoAsc$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsc$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoAsc$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= Decs Insts 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoAsc$parser.done_parsing();
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Prog ::= Insts 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= LDec SEPSECCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDec ::= LDec PUNTOCOMA Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("LDec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDec ::= Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("LDec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= DVar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= DTipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= DProc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DVar ::= VAR Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("DVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DTipo ::= TYPE Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("DTipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DProc ::= PROC IDEN PAP Pars PCIE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("DProc",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DProc ::= PROC IDEN PAP PCIE Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("DProc",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Pars ::= Pars COMA Par 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Pars",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Pars ::= Par 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Pars",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Par ::= Tipo AMP IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Par",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Par ::= Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Par",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= Array 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= Registro 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= Pointer 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Array ::= ARR CAP ENT CCIE OF Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Array",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Registro ::= RECORD LLAP Campos LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Registro",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Campos ::= Campos PUNTOCOMA Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Campos",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Campos ::= Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Campos",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Campo ::= Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Campo",13, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Pointer ::= PTR Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Pointer",14, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Insts ::= Insts PUNTOCOMA Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Insts",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Insts ::= Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Insts",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Inst ::= IAsig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= IIfThen 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= IIfThenElse 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= IWhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= IRead 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= IWrite 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inst ::= INew 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Inst ::= IDelete 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Inst ::= ICall 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Inst ::= Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IAsig ::= Exp IGUAL Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IAsig",17, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IIfThen ::= IF Exp THEN Insts ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThen",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IIfThen ::= IF Exp THEN ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThen",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IIfThenElse ::= IF Exp THEN Insts ELSE Insts ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThenElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IIfThenElse ::= IF Exp THEN ELSE Insts ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThenElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IIfThenElse ::= IF Exp THEN Insts ELSE ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThenElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IIfThenElse ::= IF Exp THEN ELSE ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThenElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IWhile ::= WHILE Exp DO Insts ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IWhile",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IWhile ::= WHILE Exp DO ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IWhile",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IRead ::= READ Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IRead",21, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IWrite ::= WRITE Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IWrite",22, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INew ::= NEW Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("INew",23, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IDelete ::= DEL Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IDelete",24, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ICall ::= CALL IDEN PAP Exps PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("ICall",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ICall ::= CALL IDEN PAP PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("ICall",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Bloque ::= LLAP Prog LLCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Bloque",26, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Exps ::= Exps COMA Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Exps",27, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exps ::= Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Exps",27, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Cmp ::= LT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Cmp ::= GT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Cmp ::= GE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Cmp ::= LE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Cmp ::= EQ 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Cmp ::= NE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Op3NA ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Op3NA",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Op3NA ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Op3NA",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Op3NA ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Op3NA",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp ::= E1 MAS Exp 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Exp",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Exp",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Exp",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E1 ::= E1 AND E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E1 ::= E1 OR E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E2 ::= E2 Cmp E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E2",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E3 ::= E3 Op3NA E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E3",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E4 ::= NOT E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E4",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E5 ::= E5 CAP Exp CCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E5 ::= E5 PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E5 ::= E5 FLECHA IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E5",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E6 ::= POR E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E6",36, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E7 ::= PAP Exp PCIE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E7 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E7 ::= LREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E7 ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E7 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoAsc$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsc$do_action(
    int                        CUP$AnalizadorSintacticoAsc$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAsc$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAsc$stack,
    int                        CUP$AnalizadorSintacticoAsc$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoAsc$do_action_part00000000(
                               CUP$AnalizadorSintacticoAsc$act_num,
                               CUP$AnalizadorSintacticoAsc$parser,
                               CUP$AnalizadorSintacticoAsc$stack,
                               CUP$AnalizadorSintacticoAsc$top);
    }
}

