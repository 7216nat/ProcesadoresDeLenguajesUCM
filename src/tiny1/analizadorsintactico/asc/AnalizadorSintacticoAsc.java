
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed May 19 01:09:50 CEST 2021
//----------------------------------------------------

package tiny1.analizadorsintactico.asc;

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import tiny1.analizadorlexico.AnalizadorLexico;
import tiny1.analizadorlexico.UnidadLexica;
import tiny1.errors.GestionErrores;
import tiny1.asint.TinyASint;
import tiny1.asint.TinyASint.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed May 19 01:09:50 CEST 2021
  */
public class AnalizadorSintacticoAsc extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoAsc() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAsc(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoAsc(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\004\005\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\005\000\002\007\005\000\002\010\010\000\002" +
    "\010\007\000\002\011\005\000\002\011\003\000\002\012" +
    "\005\000\002\012\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\010\000\002\015\006\000\002\017\005\000\002\017" +
    "\003\000\002\020\004\000\002\016\004\000\002\021\005" +
    "\000\002\021\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\005" +
    "\000\002\024\007\000\002\024\006\000\002\025\011\000" +
    "\002\025\010\000\002\025\010\000\002\025\007\000\002" +
    "\026\007\000\002\026\006\000\002\027\004\000\002\030" +
    "\004\000\002\031\004\000\002\032\004\000\002\034\003" +
    "\000\002\033\007\000\002\033\006\000\002\035\005\000" +
    "\002\036\005\000\002\036\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\041\005\000\002\041\005\000" +
    "\002\041\003\000\002\042\005\000\002\042\005\000\002" +
    "\042\003\000\002\043\005\000\002\043\003\000\002\044" +
    "\005\000\002\044\003\000\002\045\004\000\002\045\004" +
    "\000\002\045\003\000\002\046\006\000\002\046\005\000" +
    "\002\046\005\000\002\046\003\000\002\047\004\000\002" +
    "\047\003\000\002\050\005\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\060\004\044\005\035\006\051\007\030\013" +
    "\026\014\054\016\033\021\014\022\052\023\023\027\046" +
    "\032\022\033\020\040\027\041\050\042\042\043\011\044" +
    "\063\045\043\046\036\050\017\063\032\064\005\001\002" +
    "\000\016\002\uffe0\025\uffe0\026\uffe0\031\uffe0\051\uffe0\056" +
    "\uffe0\001\002\000\024\004\044\005\035\006\051\007\030" +
    "\013\026\014\054\016\033\046\036\064\005\001\002\000" +
    "\016\002\uffdd\025\uffdd\026\uffdd\031\uffdd\051\uffdd\056\uffdd" +
    "\001\002\000\006\056\ufffb\075\ufffb\001\002\000\006\056" +
    "\ufffc\075\ufffc\001\002\000\030\004\044\005\035\006\051" +
    "\007\030\013\026\014\054\016\033\021\014\046\036\063" +
    "\032\064\005\001\002\000\016\002\uffdf\025\uffdf\026\uffdf" +
    "\031\uffdf\051\uffdf\056\uffdf\001\002\000\016\002\uffdc\025" +
    "\uffdc\026\uffdc\031\uffdc\051\uffdc\056\uffdc\001\002\000\030" +
    "\004\044\005\035\006\051\007\030\013\026\014\054\016" +
    "\033\021\014\046\036\063\032\064\005\001\002\000\006" +
    "\056\247\075\246\001\002\000\004\002\245\001\002\000" +
    "\060\004\044\005\035\006\051\007\030\013\026\014\054" +
    "\016\033\021\014\022\052\023\023\027\046\032\022\033" +
    "\020\040\027\041\050\042\042\043\011\044\063\045\043" +
    "\046\036\050\017\063\032\064\005\001\002\000\022\004" +
    "\116\010\112\011\121\012\114\015\123\034\120\035\111" +
    "\037\122\001\002\000\016\002\uffd9\025\uffd9\026\uffd9\031" +
    "\uffd9\051\uffd9\056\uffd9\001\002\000\004\004\231\001\002" +
    "\000\030\004\044\005\035\006\051\007\030\013\026\014" +
    "\054\016\033\021\014\046\036\063\032\064\005\001\002" +
    "\000\016\002\uffe1\025\uffe1\026\uffe1\031\uffe1\051\uffe1\056" +
    "\uffe1\001\002\000\016\002\uffd6\025\uffd6\026\uffd6\031\uffd6" +
    "\051\uffd6\056\uffd6\001\002\000\072\002\uffa3\017\uffa3\020" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3\047\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\001" +
    "\002\000\030\004\044\005\035\006\051\007\030\013\026" +
    "\014\054\016\033\021\014\046\036\063\032\064\005\001" +
    "\002\000\072\002\uffa1\017\uffa1\020\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\030\uffa1\031\uffa1\047\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\001\002\000\016\002\uffde" +
    "\025\uffde\026\uffde\031\uffde\051\uffde\056\uffde\001\002\000" +
    "\024\004\044\005\035\006\051\007\030\013\026\014\054" +
    "\016\033\046\036\064\005\001\002\000\072\002\uff9f\017" +
    "\uff9f\020\uff9f\024\uff9f\025\uff9f\026\uff9f\030\uff9f\031\uff9f" +
    "\047\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074" +
    "\uff9f\001\002\000\016\002\uffdb\025\uffdb\026\uffdb\031\uffdb" +
    "\051\uffdb\056\uffdb\001\002\000\072\002\uffa5\017\uffa5\020" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\030\uffa5\031\uffa5\047\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\061\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\001" +
    "\002\000\030\004\044\005\035\006\051\007\030\013\026" +
    "\014\054\016\033\021\014\046\036\063\032\064\005\001" +
    "\002\000\052\004\044\005\035\006\051\007\030\013\026" +
    "\014\054\016\033\021\014\023\023\027\046\032\022\040" +
    "\027\041\050\042\042\043\011\045\043\046\036\050\017" +
    "\063\032\064\005\001\002\000\016\002\uffda\025\uffda\026" +
    "\uffda\031\uffda\051\uffda\056\uffda\001\002\000\016\002\uffd7" +
    "\025\uffd7\026\uffd7\031\uffd7\051\uffd7\056\uffd7\001\002\000" +
    "\030\004\044\005\035\006\051\007\030\013\026\014\054" +
    "\016\033\021\014\046\036\063\032\064\005\001\002\000" +
    "\016\002\uffc8\025\uffc8\026\uffc8\031\uffc8\051\uffc8\056\uffc8" +
    "\001\002\000\072\002\uffa0\017\uffa0\020\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\030\uffa0\031\uffa0\047\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\061\uffa0\062" +
    "\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\071\uffa0\072\uffa0\073\uffa0\074\uffa0\001\002\000\006\056" +
    "\ufff9\075\ufff9\001\002\000\030\004\044\005\035\006\051" +
    "\007\030\013\026\014\054\016\033\021\014\046\036\063" +
    "\032\064\005\001\002\000\010\002\uffff\051\uffff\056\177" +
    "\001\002\000\030\004\044\005\035\006\051\007\030\013" +
    "\026\014\054\016\033\021\014\046\036\063\032\064\005" +
    "\001\002\000\072\002\uffa4\017\uffa4\020\uffa4\024\uffa4\025" +
    "\uffa4\026\uffa4\030\uffa4\031\uffa4\047\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\061\uffa4\062" +
    "\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\074\uffa4\001\002\000\004\004" +
    "\160\001\002\000\072\002\uffa7\017\uffa7\020\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\030\uffa7\031\uffa7\047\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\001\002\000\072" +
    "\002\uffa2\017\uffa2\020\uffa2\024\uffa2\025\uffa2\026\uffa2\030" +
    "\uffa2\031\uffa2\047\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\057\uffa2\061\uffa2\062\uffa2\063\uffa2\064" +
    "\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2" +
    "\073\uffa2\074\uffa2\001\002\000\072\002\uffa9\017\uffa9\020" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\030\uffa9\031\uffa9\047\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\001" +
    "\002\000\016\002\uffd8\025\uffd8\026\uffd8\031\uffd8\051\uffd8" +
    "\056\uffd8\001\002\000\072\002\uffad\017\uffad\020\uffad\024" +
    "\uffad\025\uffad\026\uffad\030\uffad\031\uffad\047\uffad\051\uffad" +
    "\052\152\053\uffad\054\uffad\055\153\056\uffad\057\151\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\001\002\000" +
    "\064\002\uffb0\017\uffb0\020\uffb0\024\uffb0\025\uffb0\026\uffb0" +
    "\030\uffb0\031\uffb0\047\uffb0\051\uffb0\053\uffb0\054\uffb0\056" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\147\065\146\066\144" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\001" +
    "\002\000\056\002\uffb2\017\uffb2\020\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\030\uffb2\031\uffb2\047\uffb2\051\uffb2\053\uffb2\054" +
    "\uffb2\056\uffb2\061\uffb2\062\uffb2\063\uffb2\067\uffb2\070\uffb2" +
    "\071\uffb2\072\uffb2\073\uffb2\074\uffb2\001\002\000\056\002" +
    "\uffb4\017\uffb4\020\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4" +
    "\031\uffb4\047\uffb4\051\uffb4\053\uffb4\054\uffb4\056\uffb4\061" +
    "\uffb4\062\uffb4\063\uffb4\067\100\070\103\071\077\072\102" +
    "\073\076\074\104\001\002\000\022\004\116\010\112\011" +
    "\121\012\114\015\123\034\120\035\111\037\122\001\002" +
    "\000\042\002\uffb7\017\072\020\074\024\uffb7\025\uffb7\026" +
    "\uffb7\030\uffb7\031\uffb7\047\uffb7\051\uffb7\053\uffb7\054\uffb7" +
    "\056\uffb7\061\uffb7\062\071\063\073\001\002\000\004\061" +
    "\067\001\002\000\006\056\ufffa\075\ufffa\001\002\000\030" +
    "\004\044\005\035\006\051\007\030\013\026\014\054\016" +
    "\033\021\014\046\036\063\032\064\005\001\002\000\016" +
    "\002\uffd5\025\uffd5\026\uffd5\031\uffd5\051\uffd5\056\uffd5\001" +
    "\002\000\030\004\044\005\035\006\051\007\030\013\026" +
    "\014\054\016\033\021\014\046\036\063\032\064\005\001" +
    "\002\000\030\004\044\005\035\006\051\007\030\013\026" +
    "\014\054\016\033\021\014\046\036\063\032\064\005\001" +
    "\002\000\030\004\044\005\035\006\051\007\030\013\026" +
    "\014\054\016\033\021\014\046\036\063\032\064\005\001" +
    "\002\000\030\004\044\005\035\006\051\007\030\013\026" +
    "\014\054\016\033\021\014\046\036\063\032\064\005\001" +
    "\002\000\056\002\uffb5\017\uffb5\020\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\030\uffb5\031\uffb5\047\uffb5\051\uffb5\053\uffb5\054" +
    "\uffb5\056\uffb5\061\uffb5\062\uffb5\063\uffb5\067\100\070\103" +
    "\071\077\072\102\073\076\074\104\001\002\000\030\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\013\uffbe\014\uffbe\016\uffbe" +
    "\021\uffbe\046\uffbe\063\uffbe\064\uffbe\001\002\000\030\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\013\uffc2\014\uffc2\016\uffc2" +
    "\021\uffc2\046\uffc2\063\uffc2\064\uffc2\001\002\000\030\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\013\uffc1\014\uffc1\016\uffc1" +
    "\021\uffc1\046\uffc1\063\uffc1\064\uffc1\001\002\000\030\004" +
    "\044\005\035\006\051\007\030\013\026\014\054\016\033" +
    "\021\014\046\036\063\032\064\005\001\002\000\030\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\013\uffbf\014\uffbf\016\uffbf" +
    "\021\uffbf\046\uffbf\063\uffbf\064\uffbf\001\002\000\030\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\013\uffc0\014\uffc0\016\uffc0" +
    "\021\uffc0\046\uffc0\063\uffc0\064\uffc0\001\002\000\030\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\013\uffbd\014\uffbd\016\uffbd" +
    "\021\uffbd\046\uffbd\063\uffbd\064\uffbd\001\002\000\056\002" +
    "\uffb3\017\uffb3\020\uffb3\024\uffb3\025\uffb3\026\uffb3\030\uffb3" +
    "\031\uffb3\047\uffb3\051\uffb3\053\uffb3\054\uffb3\056\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\001\002\000\036\002\uffb8\017\072\020" +
    "\074\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\047\uffb8" +
    "\051\uffb8\053\uffb8\054\uffb8\056\uffb8\061\uffb8\001\002\000" +
    "\056\002\uffb6\017\uffb6\020\uffb6\024\uffb6\025\uffb6\026\uffb6" +
    "\030\uffb6\031\uffb6\047\uffb6\051\uffb6\053\uffb6\054\uffb6\056" +
    "\uffb6\061\uffb6\062\uffb6\063\uffb6\067\100\070\103\071\077" +
    "\072\102\073\076\074\104\001\002\000\032\002\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\030\uffb9\031\uffb9\047\uffb9\051\uffb9" +
    "\053\uffb9\054\uffb9\056\uffb9\061\uffb9\001\002\000\004\052" +
    "\137\001\002\000\006\004\ufff0\060\ufff0\001\002\000\004" +
    "\004\136\001\002\000\006\004\uffee\060\uffee\001\002\000" +
    "\006\004\uffea\060\uffea\001\002\000\006\004\uffec\060\uffec" +
    "\001\002\000\006\004\uffeb\060\uffeb\001\002\000\004\050" +
    "\126\001\002\000\006\004\uffed\060\uffed\001\002\000\022" +
    "\004\116\010\112\011\121\012\114\015\123\034\120\035" +
    "\111\037\122\001\002\000\006\004\uffef\060\uffef\001\002" +
    "\000\006\004\uffe9\060\uffe9\001\002\000\006\004\uffe3\060" +
    "\uffe3\001\002\000\022\004\116\010\112\011\121\012\114" +
    "\015\123\034\120\035\111\037\122\001\002\000\004\004" +
    "\135\001\002\000\006\051\132\056\133\001\002\000\006" +
    "\051\uffe5\056\uffe5\001\002\000\006\004\uffe7\060\uffe7\001" +
    "\002\000\022\004\116\010\112\011\121\012\114\015\123" +
    "\034\120\035\111\037\122\001\002\000\006\051\uffe6\056" +
    "\uffe6\001\002\000\006\051\uffe4\056\uffe4\001\002\000\006" +
    "\056\ufff8\075\ufff8\001\002\000\004\005\140\001\002\000" +
    "\004\053\141\001\002\000\004\036\142\001\002\000\022" +
    "\004\116\010\112\011\121\012\114\015\123\034\120\035" +
    "\111\037\122\001\002\000\006\004\uffe8\060\uffe8\001\002" +
    "\000\030\004\uffba\005\uffba\006\uffba\007\uffba\013\uffba\014" +
    "\uffba\016\uffba\021\uffba\046\uffba\063\uffba\064\uffba\001\002" +
    "\000\030\004\044\005\035\006\051\007\030\013\026\014" +
    "\054\016\033\021\014\046\036\063\032\064\005\001\002" +
    "\000\030\004\uffbb\005\uffbb\006\uffbb\007\uffbb\013\uffbb\014" +
    "\uffbb\016\uffbb\021\uffbb\046\uffbb\063\uffbb\064\uffbb\001\002" +
    "\000\030\004\uffbc\005\uffbc\006\uffbc\007\uffbc\013\uffbc\014" +
    "\uffbc\016\uffbc\021\uffbc\046\uffbc\063\uffbc\064\uffbc\001\002" +
    "\000\056\002\uffb1\017\uffb1\020\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\030\uffb1\031\uffb1\047\uffb1\051\uffb1\053\uffb1\054\uffb1" +
    "\056\uffb1\061\uffb1\062\uffb1\063\uffb1\067\uffb1\070\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\001\002\000\004\004\157" +
    "\001\002\000\030\004\044\005\035\006\051\007\030\013" +
    "\026\014\054\016\033\021\014\046\036\063\032\064\005" +
    "\001\002\000\004\004\154\001\002\000\072\002\uffab\017" +
    "\uffab\020\uffab\024\uffab\025\uffab\026\uffab\030\uffab\031\uffab" +
    "\047\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\067\uffab\070\uffab\071\uffab\072\uffab\073\uffab\074" +
    "\uffab\001\002\000\004\053\156\001\002\000\072\002\uffac" +
    "\017\uffac\020\uffac\024\uffac\025\uffac\026\uffac\030\uffac\031" +
    "\uffac\047\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\001\002\000\072\002\uffaa\017\uffaa\020\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\030\uffaa\031\uffaa\047\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\061" +
    "\uffaa\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\001\002\000" +
    "\004\046\161\001\002\000\024\004\116\010\112\011\121" +
    "\012\114\015\123\034\120\035\111\037\122\047\163\001" +
    "\002\000\006\004\174\060\173\001\002\000\004\050\017" +
    "\001\002\000\006\047\167\054\166\001\002\000\006\047" +
    "\ufff3\054\ufff3\001\002\000\022\004\116\010\112\011\121" +
    "\012\114\015\123\034\120\035\111\037\122\001\002\000" +
    "\004\050\017\001\002\000\006\056\ufff6\075\ufff6\001\002" +
    "\000\006\047\ufff4\054\ufff4\001\002\000\006\056\ufff5\075" +
    "\ufff5\001\002\000\004\004\175\001\002\000\006\047\ufff1" +
    "\054\ufff1\001\002\000\006\047\ufff2\054\ufff2\001\002\000" +
    "\016\002\uffc9\025\uffc9\026\uffc9\031\uffc9\051\uffc9\056\uffc9" +
    "\001\002\000\052\004\044\005\035\006\051\007\030\013" +
    "\026\014\054\016\033\021\014\023\023\027\046\032\022" +
    "\040\027\041\050\042\042\043\011\045\043\046\036\050" +
    "\017\063\032\064\005\001\002\000\016\002\uffe2\025\uffe2" +
    "\026\uffe2\031\uffe2\051\uffe2\056\uffe2\001\002\000\004\030" +
    "\202\001\002\000\054\004\044\005\035\006\051\007\030" +
    "\013\026\014\054\016\033\021\014\023\023\027\046\031" +
    "\203\032\022\040\027\041\050\042\042\043\011\045\043" +
    "\046\036\050\017\063\032\064\005\001\002\000\016\002" +
    "\uffcd\025\uffcd\026\uffcd\031\uffcd\051\uffcd\056\uffcd\001\002" +
    "\000\006\031\205\056\177\001\002\000\016\002\uffce\025" +
    "\uffce\026\uffce\031\uffce\051\uffce\056\uffce\001\002\000\016" +
    "\002\uffcc\025\uffcc\026\uffcc\031\uffcc\051\uffcc\056\uffcc\001" +
    "\002\000\010\002\001\051\001\056\177\001\002\000\004" +
    "\047\211\001\002\000\072\002\uffa6\017\uffa6\020\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\030\uffa6\031\uffa6\047\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\061" +
    "\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6" +
    "\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\001\002\000" +
    "\072\002\uffae\017\uffae\020\uffae\024\uffae\025\uffae\026\uffae" +
    "\030\uffae\031\uffae\047\uffae\051\uffae\052\152\053\uffae\054" +
    "\uffae\055\153\056\uffae\057\151\061\uffae\062\uffae\063\uffae" +
    "\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\071\uffae\072" +
    "\uffae\073\uffae\074\uffae\001\002\000\016\002\uffca\025\uffca" +
    "\026\uffca\031\uffca\051\uffca\056\uffca\001\002\000\004\024" +
    "\215\001\002\000\056\004\044\005\035\006\051\007\030" +
    "\013\026\014\054\016\033\021\014\023\023\025\217\026" +
    "\216\027\046\032\022\040\027\041\050\042\042\043\011" +
    "\045\043\046\036\050\017\063\032\064\005\001\002\000" +
    "\016\002\uffd3\025\uffd3\026\uffd3\031\uffd3\051\uffd3\056\uffd3" +
    "\001\002\000\054\004\044\005\035\006\051\007\030\013" +
    "\026\014\054\016\033\021\014\023\023\026\226\027\046" +
    "\032\022\040\027\041\050\042\042\043\011\045\043\046" +
    "\036\050\017\063\032\064\005\001\002\000\010\025\221" +
    "\026\222\056\177\001\002\000\054\004\044\005\035\006" +
    "\051\007\030\013\026\014\054\016\033\021\014\023\023" +
    "\026\223\027\046\032\022\040\027\041\050\042\042\043" +
    "\011\045\043\046\036\050\017\063\032\064\005\001\002" +
    "\000\016\002\uffd4\025\uffd4\026\uffd4\031\uffd4\051\uffd4\056" +
    "\uffd4\001\002\000\016\002\uffd0\025\uffd0\026\uffd0\031\uffd0" +
    "\051\uffd0\056\uffd0\001\002\000\006\026\225\056\177\001" +
    "\002\000\016\002\uffd2\025\uffd2\026\uffd2\031\uffd2\051\uffd2" +
    "\056\uffd2\001\002\000\016\002\uffcf\025\uffcf\026\uffcf\031" +
    "\uffcf\051\uffcf\056\uffcf\001\002\000\006\026\230\056\177" +
    "\001\002\000\016\002\uffd1\025\uffd1\026\uffd1\031\uffd1\051" +
    "\uffd1\056\uffd1\001\002\000\004\046\232\001\002\000\032" +
    "\004\044\005\035\006\051\007\030\013\026\014\054\016" +
    "\033\021\014\046\036\047\234\063\032\064\005\001\002" +
    "\000\006\047\237\054\236\001\002\000\016\002\uffc6\025" +
    "\uffc6\026\uffc6\031\uffc6\051\uffc6\056\uffc6\001\002\000\006" +
    "\047\uffc3\054\uffc3\001\002\000\030\004\044\005\035\006" +
    "\051\007\030\013\026\014\054\016\033\021\014\046\036" +
    "\063\032\064\005\001\002\000\016\002\uffc7\025\uffc7\026" +
    "\uffc7\031\uffc7\051\uffc7\056\uffc7\001\002\000\006\047\uffc4" +
    "\054\uffc4\001\002\000\004\004\242\001\002\000\006\056" +
    "\ufff7\075\ufff7\001\002\000\004\051\244\001\002\000\020" +
    "\002\uffc5\025\uffc5\026\uffc5\031\uffc5\051\uffc5\056\uffc5\075" +
    "\uffc5\001\002\000\004\002\000\001\002\000\052\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\013\ufffe\014\ufffe\016\ufffe\021" +
    "\ufffe\023\ufffe\027\ufffe\032\ufffe\040\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\045\ufffe\046\ufffe\050\ufffe\063\ufffe\064\ufffe\001" +
    "\002\000\010\022\052\033\020\044\063\001\002\000\006" +
    "\056\ufffd\075\ufffd\001\002\000\064\002\uffaf\017\uffaf\020" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031\uffaf\047\uffaf" +
    "\051\uffaf\053\uffaf\054\uffaf\056\uffaf\061\uffaf\062\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf" +
    "\072\uffaf\073\uffaf\074\uffaf\001\002\000\016\002\uffcb\025" +
    "\uffcb\026\uffcb\031\uffcb\051\uffcb\056\uffcb\001\002\000\072" +
    "\002\uffa8\017\uffa8\020\uffa8\024\uffa8\025\uffa8\026\uffa8\030" +
    "\uffa8\031\uffa8\047\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8" +
    "\055\uffa8\056\uffa8\057\uffa8\061\uffa8\062\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8" +
    "\073\uffa8\074\uffa8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\072\002\015\003\036\004\014\005\007\006" +
    "\006\007\065\010\044\021\046\022\023\023\003\024\011" +
    "\025\030\026\005\027\012\030\033\031\037\032\020\033" +
    "\055\034\024\035\040\041\064\042\063\043\061\044\060" +
    "\045\057\046\056\047\054\050\052\001\001\000\002\001" +
    "\001\000\006\047\252\050\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\041\251\042" +
    "\063\043\061\044\060\045\057\046\056\047\054\050\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\045" +
    "\250\046\056\047\054\050\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\002\242\003\036\004\014\005" +
    "\007\006\006\007\065\010\044\021\046\022\023\023\003" +
    "\024\011\025\030\026\005\027\012\030\033\031\037\032" +
    "\020\033\055\034\024\035\040\041\064\042\063\043\061" +
    "\044\060\045\057\046\056\047\054\050\052\001\001\000" +
    "\012\013\240\014\116\015\114\016\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\041\213\042\063\043" +
    "\061\044\060\045\057\046\056\047\054\050\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\041\212\042\063\043\061\044\060\045\057\046\056" +
    "\047\054\050\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\211\047\054\050\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\041" +
    "\207\042\063\043\061\044\060\045\057\046\056\047\054" +
    "\050\052\001\001\000\054\021\206\022\023\023\003\024" +
    "\011\025\030\026\005\027\012\030\033\031\037\032\020" +
    "\033\055\034\024\035\040\041\064\042\063\043\061\044" +
    "\060\045\057\046\056\047\054\050\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\041\205\042\063\043" +
    "\061\044\060\045\057\046\056\047\054\050\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\041\200\042\063\043\061\044\060\045\057\046\056" +
    "\047\054\050\052\001\001\000\002\001\001\000\022\041" +
    "\175\042\063\043\061\044\060\045\057\046\056\047\054" +
    "\050\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\144\001\001\000" +
    "\002\001\001\000\004\037\100\001\001\000\012\013\112" +
    "\014\116\015\114\016\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\041\067\042\063" +
    "\043\061\044\060\045\057\046\056\047\054\050\052\001" +
    "\001\000\002\001\001\000\022\041\107\042\063\043\061" +
    "\044\060\045\057\046\056\047\054\050\052\001\001\000" +
    "\016\043\106\044\060\045\057\046\056\047\054\050\052" +
    "\001\001\000\020\042\105\043\061\044\060\045\057\046" +
    "\056\047\054\050\052\001\001\000\016\043\074\044\060" +
    "\045\057\046\056\047\054\050\052\001\001\000\004\037" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\044\104\045\057\046\056\047\054\050" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\124\014\116\015\114\016" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\126\014\116\015\114\016\123\017" +
    "\127\020\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\013\126\014" +
    "\116\015\114\016\123\020\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\142\014\116" +
    "\015\114\016\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\045\147\046\056\047\054\050\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\041\154\042\063\043\061\044\060" +
    "\045\057\046\056\047\054\050\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\163\012" +
    "\164\013\161\014\116\015\114\016\123\001\001\000\002" +
    "\001\001\000\004\035\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\170\013\161\014\116\015\114" +
    "\016\123\001\001\000\004\035\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\022\177\023\003\024\011\025\030\026\005\027\012" +
    "\030\033\031\037\032\020\033\055\034\024\035\040\041" +
    "\064\042\063\043\061\044\060\045\057\046\056\047\054" +
    "\050\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\021\203\022\023\023\003\024\011\025\030\026\005" +
    "\027\012\030\033\031\037\032\020\033\055\034\024\035" +
    "\040\041\064\042\063\043\061\044\060\045\057\046\056" +
    "\047\054\050\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\021\217\022\023" +
    "\023\003\024\011\025\030\026\005\027\012\030\033\031" +
    "\037\032\020\033\055\034\024\035\040\041\064\042\063" +
    "\043\061\044\060\045\057\046\056\047\054\050\052\001" +
    "\001\000\002\001\001\000\054\021\226\022\023\023\003" +
    "\024\011\025\030\026\005\027\012\030\033\031\037\032" +
    "\020\033\055\034\024\035\040\041\064\042\063\043\061" +
    "\044\060\045\057\046\056\047\054\050\052\001\001\000" +
    "\002\001\001\000\054\021\223\022\023\023\003\024\011" +
    "\025\030\026\005\027\012\030\033\031\037\032\020\033" +
    "\055\034\024\035\040\041\064\042\063\043\061\044\060" +
    "\045\057\046\056\047\054\050\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\036\232\041\234\042\063\043\061" +
    "\044\060\045\057\046\056\047\054\050\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\041\237\042\063\043\061\044\060\045\057\046\056\047" +
    "\054\050\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\247\006\006\007\065\010\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoAsc$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoAsc$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoAsc$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	errores = new GestionErrores();
	AnalizadorLexico alex = (AnalizadorLexico) getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }



	private GestionErrores errores;
	public void syntax_error(Symbol unidadLexica){
		errores.errorSintactico((UnidadLexica) unidadLexica);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoAsc$actions {


   private TinyASint asint = new TinyASint();

  private final AnalizadorSintacticoAsc parser;

  /** Constructor */
  CUP$AnalizadorSintacticoAsc$actions(AnalizadorSintacticoAsc parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsc$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoAsc$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAsc$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAsc$stack,
    int                        CUP$AnalizadorSintacticoAsc$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsc$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoAsc$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= Decs Insts 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.progConDecs(decs, insts); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoAsc$parser.done_parsing();
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Prog ::= Insts 
            {
              Prog RESULT =null;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.progSinDecs(insts); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= LDec SEPSECCION 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT = decs; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Decs",1, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDec ::= LDec PUNTOCOMA Dec 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.decComp(decs, dec); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("LDec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDec ::= Dec 
            {
              Decs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.decSimp(dec); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("LDec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= DVar 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = dec; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= DTipo 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = dec; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= DProc 
            {
              Dec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = dec; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DVar ::= VAR Tipo IDEN 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.dVar(tipo, id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("DVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DTipo ::= TYPE Tipo IDEN 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.dTipo(tipo, id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("DTipo",5, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DProc ::= PROC IDEN PAP Pars PCIE Bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-4)).value;
		Pars pars = (Pars)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Inst bloque = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT =  asint.dProcConPars(id, pars, bloque);
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("DProc",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DProc ::= PROC IDEN PAP PCIE Bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-3)).value;
		Inst bloque = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT =  asint.dProcSinPars(id, bloque);
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("DProc",6, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Pars ::= Pars COMA Par 
            {
              Pars RESULT =null;
		Pars pars = (Pars)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Par par = (Par)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.parsComp(pars, par); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Pars",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Pars ::= Par 
            {
              Pars RESULT =null;
		Par par = (Par)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.parsSimp(par); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Pars",7, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Par ::= Tipo AMP IDEN 
            {
              Par RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.parRef(tipo, id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Par",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Par ::= Tipo IDEN 
            {
              Par RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.parSinRef(tipo, id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Par",8, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		StringLocalizado i = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.intint(i); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= REAL 
            {
              Tipo RESULT =null;
		StringLocalizado real = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.real(real); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= BOOL 
            {
              Tipo RESULT =null;
		StringLocalizado bool = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.boolbool(bool); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= STRING 
            {
              Tipo RESULT =null;
		StringLocalizado string = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.stringstring(string); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= IDEN 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.idenTipo(id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= Array 
            {
              Tipo RESULT =null;
		Tipo array = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = array;
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= Registro 
            {
              Tipo RESULT =null;
		Tipo reg = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = reg; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= Pointer 
            {
              Tipo RESULT =null;
		Tipo ptr = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = ptr; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Array ::= ARR CAP ENT CCIE OF Tipo 
            {
              Tipo RESULT =null;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.array(ent, tipo); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Array",10, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Registro ::= RECORD LLAP Campos LLCIE 
            {
              Tipo RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT = asint.registro(campos); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Registro",11, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Campos ::= Campos PUNTOCOMA Campo 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.camposComp(campos, campo); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Campos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Campos ::= Campo 
            {
              Campos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.camposSimp(campo); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Campos",13, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Campo ::= Tipo IDEN 
            {
              Campo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.campo(tipo, id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Campo",14, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Pointer ::= PTR Tipo 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.pointer(tipo); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Pointer",12, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Insts ::= Insts PUNTOCOMA Inst 
            {
              Insts RESULT =null;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.instsComp(insts, inst); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Insts",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Insts ::= Inst 
            {
              Insts RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.instsSimp(inst); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Insts",15, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Inst ::= IAsig 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= IIfThen 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= IIfThenElse 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= IWhile 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= IRead 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= IWrite 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= INew 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inst ::= IDelete 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Inst ::= ICall 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Inst ::= Bloque 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Inst ::= Inl 
            {
              Inst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = inst; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inst",16, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IAsig ::= E0 IGUAL E0 
            {
              Inst RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.iAsig(e0, e1); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IAsig",17, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IIfThen ::= IF E0 THEN Insts ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-3)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT = asint.iIfThen1(e, insts); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThen",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IIfThen ::= IF E0 THEN ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		 RESULT = asint.iIfThen0(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThen",18, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IIfThenElse ::= IF E0 THEN Insts ELSE Insts ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-5)).value;
		Insts insts1 = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-3)).value;
		Insts insts2 = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT =  asint.iIfThenElse11(e, insts1, insts2); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThenElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IIfThenElse ::= IF E0 THEN ELSE Insts ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-4)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT =  asint.iIfThenElse01(e, insts); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThenElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IIfThenElse ::= IF E0 THEN Insts ELSE ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-4)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		 RESULT =  asint.iIfThenElse10(e, insts); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThenElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IIfThenElse ::= IF E0 THEN ELSE ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-3)).value;
		 RESULT =  asint.iIfThenElse00(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IIfThenElse",19, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IWhile ::= WHILE E0 DO Insts ENDWHILE 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-3)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT =  asint.iWhile1(e, insts); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IWhile",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IWhile ::= WHILE E0 DO ENDWHILE 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		 RESULT =  asint.iWhile0(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IWhile",20, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IRead ::= READ E0 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT =  asint.iRead(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IRead",21, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IWrite ::= WRITE E0 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT =  asint.iWrite(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IWrite",22, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INew ::= NEW E0 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT =  asint.iNew(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("INew",23, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IDelete ::= DEL E0 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT =  asint.iDelete(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("IDelete",24, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Inl ::= NL 
            {
              Inst RESULT =null;
		 RESULT =  asint.iNl(); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Inl",26, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ICall ::= CALL IDEN PAP Exps PCIE 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-3)).value;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT =  asint.iCall1(id, exps); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("ICall",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ICall ::= CALL IDEN PAP PCIE 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		 RESULT =  asint.iCall0(id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("ICall",25, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Bloque ::= LLAP Prog LLCIE 
            {
              Inst RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT = asint.bloque(prog); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Bloque",27, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Exps ::= Exps COMA E0 
            {
              Exps RESULT =null;
		Exps exps = (Exps)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.exps1(exps, exp); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Exps",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Exps ::= E0 
            {
              Exps RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.exps0(exp); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Exps",28, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Cmp ::= LT 
            {
              String RESULT =null;
		 RESULT = "<";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Cmp ::= GT 
            {
              String RESULT =null;
		 RESULT = ">";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Cmp ::= GE 
            {
              String RESULT =null;
		 RESULT = ">=";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Cmp ::= LE 
            {
              String RESULT =null;
		 RESULT = "<=";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Cmp ::= EQ 
            {
              String RESULT =null;
		 RESULT = "==";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Cmp ::= NE 
            {
              String RESULT =null;
		 RESULT = "!=";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Cmp",29, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Op3NA ::= POR 
            {
              String RESULT =null;
		 RESULT = "*";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Op3NA",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Op3NA ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Op3NA",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Op3NA ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%";
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("Op3NA",30, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E0 ::= E1 MAS E0 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.suma(e0, e1); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E0 ::= E1 MENOS E1 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.resta(e0, e1); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E0",31, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E1 ::= E1 AND E2 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.and(e0, e1); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E1 ::= E1 OR E2 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.or(e0, e1); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E1",32, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E2 ::= E2 Cmp E3 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		String cmp = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.cmp(cmp, e0, e1); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E2",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E2",33, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E3 ::= E4 Op3NA E4 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.op3na(op, e0, e1); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E3",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E3",34, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.not(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E4",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E4 ::= MENOS E5 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.neg(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E4",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E4",35, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E5 ::= E5 CAP E0 CCIE 
            {
              Exp RESULT =null;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-3)).value;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT = asint.index(e0, e1); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E5",36, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E5 ::= E5 PUNTO IDEN 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.atr(e, id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E5",36, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E5 ::= E5 FLECHA IDEN 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.ptr(e, id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E5",36, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E5",36, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E6 ::= POR E6 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.indir(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E6",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E6",37, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E7 ::= PAP E0 PCIE 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.elementAt(CUP$AnalizadorSintacticoAsc$top-1)).value;
		 RESULT = asint.parentesis(e); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E7 ::= ENT 
            {
              Exp RESULT =null;
		StringLocalizado ent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.ent(ent); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E7 ::= LREAL 
            {
              Exp RESULT =null;
		StringLocalizado lreal = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.lreal(lreal); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		StringLocalizado t = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.truetrue(t); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		StringLocalizado f = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.falsefalse(f); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E7 ::= CADENA 
            {
              Exp RESULT =null;
		StringLocalizado cad = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.cadena(cad); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E7 ::= IDEN 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.idenExp(id); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E7 ::= NULL 
            {
              Exp RESULT =null;
		StringLocalizado n = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoAsc$stack.peek()).value;
		 RESULT = asint.nullnull(n); 
              CUP$AnalizadorSintacticoAsc$result = parser.getSymbolFactory().newSymbol("E7",38, RESULT);
            }
          return CUP$AnalizadorSintacticoAsc$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoAsc$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoAsc$do_action(
    int                        CUP$AnalizadorSintacticoAsc$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoAsc$parser,
    java.util.Stack            CUP$AnalizadorSintacticoAsc$stack,
    int                        CUP$AnalizadorSintacticoAsc$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoAsc$do_action_part00000000(
                               CUP$AnalizadorSintacticoAsc$act_num,
                               CUP$AnalizadorSintacticoAsc$parser,
                               CUP$AnalizadorSintacticoAsc$stack,
                               CUP$AnalizadorSintacticoAsc$top);
    }
}

